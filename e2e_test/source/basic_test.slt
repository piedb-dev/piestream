statement ok
create materialized source s1 (v1 int, v2 varchar) with ( 'connector' = 'kafka', 'kafka.topic' = 'kafka_1_partition_topic', 'kafka.brokers' = '127.0.0.1:29092', 'kafka.scan.startup.mode'='earliest' ) row format json

statement ok
select * from s1;

statement ok
create materialized source s2 (v1 int, v2 varchar) with ( 'connector' = 'kafka', 'kafka.topic' = 'kafka_2_partition_topic', 'kafka.brokers' = '127.0.0.1:29092', 'kafka.scan.startup.mode'='earliest'  ) row format json

statement ok
select * from s2;

statement ok
create materialized source s3 (v1 int, v2 varchar) with ( 'connector' = 'kafka', 'kafka.topic' = 'kafka_3_partition_topic', 'kafka.brokers' = '127.0.0.1:29092', 'kafka.scan.startup.mode'='earliest'  ) row format json

statement ok
select * from s3;

statement ok
create materialized source s4 (v1 int, v2 varchar) with ( 'connector' = 'kafka', 'kafka.topic' = 'kafka_4_partition_topic', 'kafka.brokers' = '127.0.0.1:29092', 'kafka.scan.startup.mode'='earliest'  ) row format json

statement ok
select * from s4;

statement ok
create materialized source s5 (v1 int, v2 varchar) with ( 'connector' = 'kafka', 'kafka.topic' = 'kafka_4_partition_topic_with_100_message', 'kafka.brokers' = '127.0.0.1:29092', 'kafka.scan.startup.mode'='earliest'  ) row format json

statement ok
select * from s5;

statement ok
create materialized source s6 (v1 int, v2 varchar) with ( 'connector' = 'kafka', 'kafka.topic' = 'kafka_1_partition_mv_topic', 'kafka.brokers' = '127.0.0.1:29092', 'kafka.scan.startup.mode'='earliest'  ) row format json

statement ok
select * from s6;

statement ok
flush;

# Wait enough time to ensure SourceExecutor consumes all Kafka data.
sleep 1s

query IT rowsort
select * from s1
----
1 1
2 22
3 333
4 4444

statement ok
drop source s1

query IT rowsort
select * from s2
----
1 1
2 22
3 333
4 4444

statement ok
drop source s2

query IT rowsort
select * from s3
----
1 1
2 22
3 333
4 4444

statement ok
drop source s3

query IT rowsort
select * from s4
----
1 1
2 22
3 333
4 4444

statement ok
drop source s4

query I
select count(*) from s5
----
100

statement ok
drop source s5

query I
select count(*) from s6
----
20

statement ok
create materialized view source_mv1 as select * from s6;

statement ok
create materialized view source_mv2 as select sum(v1) as sum_v1, count(v2) as count_v2 from s6 where v1 > 3;

# Wait for source
sleep 30s

# Flush into storage
statement ok
flush;

# Note(xx): Disabled because this case fails randomly
# TODO: uncomment this after migrated to low-level kafka source
# query IT rowsort
# select v1, v2 from source_mv1;
# ----
# 0 name9
# 3 name2
# 7 name5
# 1 name7
# 3 name9
# 4 name6
# 5 name3
# 8 name8
# 9 name2
# 2 name3
# 4 name7
# 7 name0
# 1 name0
# 2 name0
# 6 name3
# 0 name5
# 5 name8
# 6 name4
# 8 name9
# 9 name2

# Note(eric): Disabled because this case fails randomly
# TODO: uncomment this after migrated to low-level kafka source
# query II
# select sum_v1, count_v2 from source_mv2;
# ----
# 78 12

statement ok
drop materialized view source_mv1

statement ok
drop materialized view source_mv2

statement ok
drop source s6