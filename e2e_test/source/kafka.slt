# expect fail with invalid broker address
statement error
create materialized source s1 (v1 int, v2 varchar) with (
  connector = 'kafka',
  topic = 'kafka_1_partition_topic',
  properties.bootstrap.server = '127.0.0.1:9092',
  scan.startup.mode = 'earliest'
) row format json

statement ok
create materialized source s1 (v1 int, v2 varchar) with (
  connector = 'kafka',
  topic = 'kafka_1_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format json

statement ok
select * from s1;

statement ok
create materialized source s2 (v1 int, v2 varchar) with (
  connector = 'kafka',
  topic = 'kafka_2_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format json

statement ok
select * from s2;

statement ok
create materialized source s3 (v1 int, v2 varchar) with (
  connector = 'kafka',
  topic = 'kafka_3_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format json

statement ok
select * from s3;

statement ok
create materialized source s4 (v1 int, v2 varchar) with (
  connector = 'kafka',
  topic = 'kafka_4_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format json

statement ok
select * from s4;

statement ok
create materialized source s5 (v1 int, v2 varchar) with (
  connector = 'kafka',
  topic = 'kafka_4_partition_topic_with_100_message',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format json

statement ok
select * from s5;

statement ok
create materialized source s6 (v1 int, v2 varchar) with (
  connector = 'kafka',
  topic = 'kafka_1_partition_mv_topic',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format json

statement ok
select * from s6;

statement ok
create sink si
from
  s5 with (
    kafka.brokers = '127.0.0.1:29092',
    kafka.topic = 'sink_target',
    format = 'append_only',
    connector = 'kafka'
  )

query T
show sinks
----
si

statement ok
create materialized source s7 (v1 int, v2 varchar) with (
  connector = 'kafka',
  topic = 'sink_target',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format json

statement ok
select * from s7

# we cannot create debezium source without pk
statement error
create materialized source s8 (
  id integer,
  first_name varchar,
  last_name varchar,
  email varchar
) with (
  connector = 'kafka',
  topic = 'debezium_log',
  properties.bootstrap.server = '127.0.0.1:29092'
) row format debezium_json

statement ok
create materialized source s8 (
  id integer,
  first_name varchar,
  last_name varchar,
  email varchar,
  PRIMARY KEY (id)
) with (
  connector = 'kafka',
  topic = 'debezium_log',
  properties.bootstrap.server = '127.0.0.1:29092'
) row format debezium_json


statement ok
create materialized source s9 with (
  connector = 'kafka', 
  topic = 'avro_bin',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format avro message 'test_student' row schema location 'file:///piestream/avro-simple-schema.avsc'


statement ok
create materialized source s10 with (
  connector = 'kafka', 
  topic = 'avro_c_bin',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest'
) row format avro message 'user' row schema location 'file:///piestream/avro-complex-schema.avsc'


statement ok
create materialized source s11 with (
  connector = 'kafka', 
  topic = 'proto_c_bin',
  properties.bootstrap.server = '127.0.0.1:29092',
  scan.startup.mode = 'earliest',
  proto.message = 'test.User'
) row format protobuf message 'test.User' row schema location 'file:///piestream/proto-complex-schema'

statement ok
CREATE materialized SOURCE s12(
    id int,
    code string, 
    timestamp bigint, 
    xfas struct<device_model_id int, device_make_id int, ip string>[],
    contacts struct<emails string[], phones string[]>)
WITH (
    connector = 'kafka',
    topic = 'json_c',
    properties.bootstrap.server = '127.0.0.1:29092',
    scan.startup.mode = 'earliest')
ROW format JSON;

statement ok
flush;

# Wait enough time to ensure SourceExecutor consumes all Kafka data.
sleep 1s

query IT rowsort
select * from s1
----
1 1
2 22
3 333
4 4444

statement ok
drop source s1

query IT rowsort
select * from s2
----
1 1
2 22
3 333
4 4444

statement ok
drop source s2

query IT rowsort
select * from s3
----
1 1
2 22
3 333
4 4444

statement ok
drop source s3

query IT rowsort
select * from s4
----
1 1
2 22
3 333
4 4444

statement ok
drop source s4

query I
select count(*) from s5
----
100

query I
select count(*) from s7
----
100

statement ok
drop sink si

statement ok
drop source s5

statement ok
drop source s7

query I
select count(*) from s6
----
20

statement ok
create materialized view source_mv1 as select * from s6;

statement ok
create materialized view source_mv2 as select sum(v1) as sum_v1, count(v2) as count_v2 from s6 where v1 > 3;

# Wait for source
sleep 10s

# Flush into storage
statement ok
flush;

query IT rowsort
select v1, v2 from source_mv1;
----
0 name9
3 name2
7 name5
1 name7
3 name9
4 name6
5 name3
8 name8
9 name2
2 name3
4 name7
7 name0
1 name0
2 name0
6 name3
0 name5
5 name8
6 name4
8 name9
9 name2

query II
select sum_v1, count_v2 from source_mv2;
----
78 12

query ITTT rowsort
select id, first_name, last_name, email from s8;
----
1004 Anne1 Kretchmar annek@noanswer.org
1001 Sally Thomas sally.thomas@acme.com
1003 Edward Walker ed@walker.com
1002 George Bailey gbailey@foobar.com
1005 add add2 add

query IITFFBTT
select id, sequence_id, name, score, avg_score, is_lasted, entrance_date, birthday from s9;
----
32 64 str_value 32 64 t 1970-01-01 1970-01-01 00:00:00

query ITITT
select id, code, timestamp, xfas, contacts, sex from s10;
----
100 abc 1473305798 {(0,200,10.0.0.1),(1,400,10.0.0.2)} ({1xxx,2xxx},{1xxx,2xxx}) MALE

query ITITT
select id, code, timestamp, xfas, contacts, sex from s11;
----
0 abc 1473305798 {(0,200,127.0.0.1),(1,400,127.0.0.2)} ({1xxx,2xxx},{1xxx,2xxx}) MALE

query ITITT
select id, code, timestamp, xfas, contacts from s12;
----
100 abc 1473305798 {(0,200,10.0.0.1),(1,400,10.0.0.2)} ({1xxx,2xxx},{1xxx,2xxx})

statement ok
drop materialized view source_mv1

statement ok
drop materialized view source_mv2

statement ok
drop source s6

statement ok
drop source s8

statement ok
drop source s9

statement ok
drop source s10

statement ok
drop source s11

statement ok
drop source s12
