statement ok
SET RW_IMPLICIT_FLUSH TO true;

statement ok
create table lt (v1 int[][]);

statement ok
insert into lt values(Array[Array[1],Array[2,3]]);

statement ok
insert into lt values(Array[Array[1],Array[2,4]]);

query I rowsort
select * from lt;
----
{{1},{2,3}}
{{1},{2,4}}

query I
select * from lt where v1 = Array[Array[1],Array[2,3]];
----
{{1},{2,3}}

query I
select * from lt where v1 != Array[Array[1],Array[2,3]];
----
{{1},{2,4}}

query I
select * from lt where v1 < Array[Array[1],Array[2,4]];
----
{{1},{2,3}}

query I
select * from lt where v1 > Array[Array[1],Array[2,3]];
----
{{1},{2,4}}

query I
select max(v1) from lt;
----
{{1},{2,4}}

query I
select min(v1) from lt;
----
{{1},{2,3}}

statement ok
create materialized view mv as select min(v1) as m from lt;

query I
select * from mv;
----
{{1},{2,3}}

statement ok
drop materialized view mv;

statement ok
drop table lt;

statement ok
create table lt (v1 int[][]);

statement ok
insert into lt values(Array[Array[1],Array[2,null]]);

query II
select * from lt;
----
{{1},{2,NULL}}

statement ok
drop table lt;

statement ok
create table t(x int[]);

statement ok
insert into t values (Array[0,1]),(Array[0,2]),(Array[0,3]), (Array[0,4]),(Array[0,5]);

query I rowsort
select x[2] from t;
----
1
2
3
4
5

statement ok
drop table t;

## Test single quote style array syntax.

# Test assign cast.
statement ok
create table t(arr int[]);

statement ok
insert into t values ('{1, 2, 3}'), ('{4, 5, 6}');

query T
select pg_typeof(arr) from t;
----
integer[]
integer[]

statement ok
drop table t;

# Test explicit and implicit cast
query T
select pg_typeof(arr) from (values ('{1, 2, 3}'::integer[]), ('{4, 5, 6}')) as t(arr);
----
integer[]
integer[]

query T
select pg_typeof(arr::integer[]) from (values ('{1, 2, 3}'), ('{4, 5, 6}')) as t(arr);
----
integer[]
integer[]

# Test explicit cast to float array
query T
select pg_typeof(arr::float[]) from (values ('{1, 2, 3}'), ('{4, 5, 6}')) as t(arr);
----
double precision[]
double precision[]

# Test explicit cast to varchar array
query T
select pg_typeof(arr::varchar[]) from (values ('{1, 2, 3}'), ('{4, 5, 6}')) as t(arr);
----
varchar[]
varchar[]

# Test explicit cast to nested integer array
query T
select pg_typeof(arr::integer[][]) from (values ('{{1}, {2}, {3}}'), ('{{4}, {5}, {6}}')) as t(arr);
----
integer[][]
integer[][]

# Test explicit cast to varchar array. Varchar values should be trimmed
query T
select (arr::varchar[])[1] from (values ('{  1   b  ?, 2, 3}'), ('{  4   a , 5, 6}')) as t(arr);
----
1   b  ?
4   a

query TI
select pg_typeof((v1::integer[][])[2][1]), (v1::integer[][])[2][1] from (values ('{{1}, {2}}')) as t(v1);
----
integer 2

# Test multiple castings of the same input.
query TTI
select 
    (arr::varchar[][])[1][2] as double_varchar,
    (arr::varchar[][][])[1][2][3] as triple_varchar, 
    (arr::integer[][][])[1][2][3] as triple_integer
from (values ('{{{1, 2, 3}, {44, 55, 66}}}')) as t(arr);
----
{44, 55, 66} 66 66

# Test cast from array to string
query T
select array['a', 'b']::varchar;
----
{a,b}
