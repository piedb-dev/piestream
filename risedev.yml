risedev:
  #########################################
  ### Configurations used by developers ###
  #########################################

  # The default configuration will start 1 compute node, 1 meta node and 1 frontend.
  default:
    # If you want to use the local s3 storage, enable the following line
    # - use: minio

    # If you want to use aws-s3, configure AK and SK in env var and enable the following lines:
    # - use: aws-s3
    #   bucket: some-bucket

    # if you want to enable etcd backend, uncomment the following lines.
    # - use: etcd
    #   unsafe-no-fsync: true

    - use: meta-node
      enable-dashboard-v2: false
      unsafe-disable-recovery: true
    - use: compute-node
    - use: frontend

    # If you want to enable compactor, uncomment the following line, and enable either minio or aws-s3 as well.
    # - use: compactor

    # If you want to enable metrics, uncomment those two lines.
    # - use: prometheus
    # - use: grafana

    # If you want to enable tracing, uncomment the following line.
    # - use: jaeger

    # If you want to create source from Kafka, uncomment the following lines
    # Note that kafka depends on zookeeper, so zookeeper must be started beforehand.
    # - use: zookeeper
    #   persist-data: true
    # - use: kafka
    #   persist-data: true

  # `dev-compute-node` have the same settings as default except the the compute node will be started by user.
  dev-compute-node:
    - use: meta-node
    - use: compute-node
      user-managed: true
    - use: frontend

  dev-frontend:
    - use: meta-node
    - use: compute-node
    - use: frontend
      user-managed: true

  dev-meta:
    - use: meta-node
      user-managed: true
    - use: compute-node
    - use: frontend

  full:
    - use: minio
    - use: etcd
    - use: meta-node
    - use: compute-node
    - use: frontend
    - use: compactor
    - use: prometheus
    - use: grafana
    - use: zookeeper
      persist-data: true
    - use: kafka
      persist-data: true

  ##########################################
  ### Configuration used for ./risedev p ###
  ##########################################

  playground:
    - use: meta-node
      enable-dashboard-v2: false
      unsafe-disable-recovery: true
    - use: compute-node
    - use: frontend

  ######################################
  ### Configurations used in Compose ###
  ######################################

  compose:
    - use: minio
      id: minio-0
      address: ${id}
      listen-address: "0.0.0.0"
      console-address: "0.0.0.0"

    - use: meta-node
      # Id must starts with `meta-node`, therefore to be picked up by other
      # components.
      id: meta-node-0

      # Advertise address can be `id`, so as to use docker's DNS. If running
      # in host network mode, we should use IP directly in this field.
      address: ${id}

      listen-address: "0.0.0.0"

    - use: compute-node
      id: compute-node-0
      listen-address: "0.0.0.0"
      address: ${id}

    - use: frontend
      id: frontend-node-0
      listen-address: "0.0.0.0"
      address: ${id}

    - use: compactor
      id: compactor-0
      listen-address: "0.0.0.0"
      address: ${id}

    - use: redpanda

    - use: prometheus
      id: prometheus-0
      listen-address: "0.0.0.0"
      address: ${id}

  # special config for deployment, see related PR for more information
  compose-3node-host-deploy:
    - use: minio
      id: minio-0
      address: rw-source
      listen-address: "0.0.0.0"
      console-address: "0.0.0.0"

    - use: meta-node
      # Id must starts with `meta-node`, therefore to be picked up by other
      # components.
      id: meta-node-0

      # Advertise address can be `id`, so as to use docker's DNS. If running
      # in host network mode, we should use IP directly in this field.
      address: rw-meta

      listen-address: "0.0.0.0"

    - use: compute-node
      id: compute-node-0
      listen-address: "0.0.0.0"
      address: rw-compute-1

    - use: compute-node
      id: compute-node-1
      listen-address: "0.0.0.0"
      address: rw-compute-2

    - use: compute-node
      id: compute-node-2
      listen-address: "0.0.0.0"
      address: rw-compute-3

    - use: frontend
      id: frontend-node-0
      listen-address: "0.0.0.0"
      address: rw-meta

    - use: compactor
      id: compactor-0
      listen-address: "0.0.0.0"
      address: rw-source

    - use: redpanda
      address: rw-source

    - use: prometheus
      id: prometheus-0
      listen-address: "0.0.0.0"
      address: rw-meta

    - use: grafana
      listen-address: "0.0.0.0"
      address: rw-meta
      id: grafana-0

  #################################
  ### Configurations used on CI ###
  #################################

  ci-1cn-1fe:
    - use: minio
    - use: etcd
      unsafe-no-fsync: true
    - use: meta-node
      unsafe-disable-recovery: true
    - use: compute-node
    - use: frontend
    - use: compactor

  ci-3cn-1fe:
    - use: minio
    - use: etcd
      unsafe-no-fsync: true
    - use: meta-node
      unsafe-disable-recovery: true
    - use: compute-node
      port: 5687
      exporter-port: 1222
    - use: compute-node
      port: 5688
      exporter-port: 1223
    - use: compute-node
      port: 5689
      exporter-port: 1224
    - use: frontend
    - use: compactor

  ci-kafka:
    - use: minio
    - use: etcd
      unsafe-no-fsync: true
    - use: meta-node
      unsafe-disable-recovery: true
    - use: compute-node
    - use: frontend
    - use: compactor
    - use: zookeeper
      persist-data: true
    - use: kafka
      persist-data: true

compose:
  risingwave: "ghcr.io/singularity-data/risingwave:latest"
  compute-node: "ghcr.io/singularity-data/compute-node:latest"
  meta-node: "ghcr.io/singularity-data/meta-node:latest"
  compactor-node: "ghcr.io/singularity-data/compactor-node:latest"
  frontend-node: "ghcr.io/singularity-data/frontend-node:latest"
  prometheus: "prom/prometheus:latest"
  minio: "quay.io/minio/minio:latest"
  redpanda: "docker.vectorized.io/vectorized/redpanda:latest"
  grafana: "grafana/grafana-oss:latest"

# The `use` field specified in the above `risedev` section will refer to the templates below.
template:
  minio:
    # Advertise address of MinIO s3 endpoint
    address: "127.0.0.1"

    # Advertise port of MinIO s3 endpoint
    port: 9301

    # Listen address of MinIO endpoint
    listen-address: ${address}

    # Console address of MinIO s3 endpoint
    console-address: "127.0.0.1"

    # Console port of MinIO s3 endpoint
    console-port: 9400

    # Root username (can be used to login to MinIO console)
    root-user: hummockadmin

    # Root password (can be used to login to MinIO console)
    root-password: hummockadmin

    # Bucket name to store hummock information
    hummock-bucket: hummock001

    # Id of this instance
    id: minio

    # Prometheus nodes used by this MinIO
    provide-prometheus: "prometheus*"

  etcd:
    # Id of this instance
    id: "etcd"

    # Advertise address of the single-node etcd.
    address: "127.0.0.1"

    # Listen port of the single-node etcd.
    port: 2388

    # Listen address
    listen-address: ${address}

    # Peer listen port of the single-node etcd.
    peer-port: 2389

    # Whether to enable fsync (NEVER SET TO TRUE IN PRODUCTION ENVIRONMENT!)
    unsafe-no-fsync: false

  compute-node:
    # Compute-node advertise address
    address: "127.0.0.1"

    # Listen address
    listen-address: ${address}

    # Compute-node listen port
    port: 5688

    # Prometheus exporter listen port
    exporter-port: 1222

    # Id of this instance
    id: compute-node-${port}

    # Minio instances used by this compute node
    provide-minio: "minio*"

    # AWS s3 bucket used by this compute node
    provide-aws-s3: "aws-s3*"

    # Meta-nodes used by this compute node
    provide-meta-node: "meta-node*"

    # Jaeger used by this compute node
    provide-jaeger: "jaeger*"

    # Sanity check: should use shared storage if there're multiple compute nodes
    provide-compute-node: "compute-node*"

    # Sanity check: should start at lease one compactor if using shared object store
    provide-compactor: "compactor*"

    # If `user-managed` is true, this service will be started by user with the above config
    user-managed: false

    # Whether to enable in-memory pure KV state backend
    enable-in-memory-kv-state-backend: false

  meta-node:
    # Meta-node advertise address
    address: "127.0.0.1"

    # Meta-node listen port
    port: 5690

    # Listen address
    listen-address: ${address}

    # Dashboard listen port
    dashboard-port: 5691

    # Prometheus exporter listen port
    exporter-port: 1250

    # Id of this instance
    id: meta-node-${port}

    # If `user-managed` is true, this service will be started by user with the above config
    user-managed: false

    # Etcd backend config
    provide-etcd-backend: "etcd*"

    # Whether to enable dashboard-v2
    enable-dashboard-v2: false

    # Whether to disable recovery mode
    unsafe-disable-recovery: false

  prometheus:
    # Advertise address of Prometheus
    address: "127.0.0.1"

    # Listen port of Prometheus
    port: 9500

    # Listen address
    listen-address: ${address}

    # Id of this instance
    id: prometheus

    # Compute-nodes used by this Prometheus instance
    provide-compute-node: "compute-node*"

    # Meta-nodes used by this Prometheus instance
    provide-meta-node: "meta-node*"

    # Minio instances used by this Prometheus instance
    provide-minio: "minio*"

    # Compactors used by this Prometheus instance
    provide-compactor: "compactor*"

  frontend:
    # Advertise address of frontend
    address: "127.0.0.1"

    # Listen port of frontend
    port: 4566

    # Listen address
    listen-address: ${address}

    # Id of this instance
    id: frontend-${port}

    # Meta-nodes used by this frontend instance
    provide-meta-node: "meta-node*"

    # If `user-managed` is true, this service will be started by user with the above config
    user-managed: false

  compactor:
    # Compactor advertise address
    address: "127.0.0.1"

    # Compactor listen port
    port: 6660

    # Listen address
    listen-address: ${address}

    # Prometheus exporter listen port
    exporter-port: 1260

    # Id of this instance
    id: compactor-${port}

    # Minio instances used by this compute node
    provide-minio: "minio*"

    # AWS s3 bucket used by this compute node
    provide-aws-s3: "aws-s3*"

    # Meta-nodes used by this compute node
    provide-meta-node: "meta-node*"

    # If `user-managed` is true, this service will be started by user with the above config
    user-managed: false

  grafana:
    # Listen address of Grafana
    listen-address: ${address}

    # Advertise address of Grafana
    address: "127.0.0.1"

    # Listen port of Grafana
    port: 3001

    # Id of this instance
    id: grafana

    # Prometheus used by this Grafana instance
    provide-prometheus: "prometheus*"

  jaeger:
    # Id of this instance
    id: jaeger

    # Dashboard listen address of Jaeger
    dashboard-address: "127.0.0.1"

    # Dashboard listen port of Jaeger
    dashboard-port: 16680

    # Jaeger has a lot of ports open, and we don't want to make this config more complex.
    # So we keep the default value of jaeger instead of making it part of RiseDev config.

  # aws-s3 is a placeholder service to provide configurations
  aws-s3:
    # Id to be picked-up by services
    id: aws-s3

    # The bucket to be used for AWS S3
    bucket: test-bucket

    # access key, secret key and region should be set in aws config (either by env var or .aws/config)

  # Apache Kafka service
  kafka:
    # Id to be picked-up by services
    id: kafka-${port}

    # Advertise address of Kafka
    address: "127.0.0.1"

    # Listen port of Kafka
    port: 29092

    # Listen address
    listen-address: ${address}

    # ZooKeeper used by this Kafka instance
    provide-zookeeper: "zookeeper*"

    # If set to true, data will be persisted at data/{id}.
    persist-data: true

    # Kafka broker id. If there are multiple instances of Kafka, we will need to set.
    broker-id: 0

  # Apache ZooKeeper service
  zookeeper:
    # Id to be picked-up by services
    id: zookeeper-${port}

    # Advertise address of ZooKeeper
    address: "127.0.0.1"

    # Listen address
    listen-address: ${address}

    # Listen port of ZooKeeper
    port: 2181

    # If set to true, data will be persisted at data/{id}.
    persist-data: true

  # Only supported in RiseDev compose
  redpanda:
    # Id to be picked-up by services
    id: redpanda

    # Port used inside docker-compose cluster (e.g. create MV)
    internal-port: 29092

    # Port used on host (e.g. import data, connecting using kafkacat)
    outside-port: 9092

    # Connect address
    address: ${id}
