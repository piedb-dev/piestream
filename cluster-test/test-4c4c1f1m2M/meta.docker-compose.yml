version: "3"
services:
  nginx:
    image: nginx:1.23-alpine
    network_mode: host
    environment:
      NODE3: ${NODE3}
      NODE4: ${NODE4}
    entrypoint: |
      sh -c "
        envsubst '$$NODE3 $$NODE4' < /nginx.conf > /etc/nginx/conf.d/minio.conf
        /docker-entrypoint.sh nginx -g 'daemon off;'
      "
    volumes:
      - ./conf/nginx.conf:/nginx.conf:ro

  meta-ok:
    image: alpine:3.16
    tty: true
    healthcheck:
      test: nc -z ${NODE4} 5507
      start_period: 30s
      interval: 30s

  frontend:
    image: piestream:latest
    network_mode: host
    command:
      - frontend-node
      - "--host"
      - "0.0.0.0:5505"
      - "--meta-addr"
      - "http://${NODE4}:5507"
    depends_on:
      meta-ok:
        condition: service_healthy

  psql:
    image: postgres:14-alpine
    network_mode: host
    entrypoint: psql -h localhost -p 5505 -d dev -U root

  prometheus-init:
    image: nginx:1.23-alpine
    tty: true
    environment:
      NODE1: ${NODE1}
      NODE2: ${NODE2}
      NODE3: ${NODE3}
      NODE4: ${NODE4}
      META: ${META}
    entrypoint: |
      sh -c "
        envsubst '$$NODE1 $$NODE2 $$NODE3 $$NODE4 $$META' < /opt/prometheus.template.yml > /opt/prometheus.yml
      "
    volumes:
      - ./conf/:/opt/

  prometheus:
    image: prom/prometheus:v2.36.0
    network_mode: host
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.listen-address=0.0.0.0:9500"
      - "--storage.tsdb.retention.time=30d"
    ports:
      - 9500:9500
    volumes:
      - ${PWD}/conf/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - prometheus-init

  grafana:
    image: grafana/grafana:8.5.4
    network_mode: host
    volumes:
      - ${PWD}/conf/grafana-datasource.yml:/etc/grafana/provisioning/datasources/pie.yml
      - ${PWD}/conf/grafana-dashboard.yml:/etc/grafana/provisioning/dashboards/pie.yml
      - ${PWD}/conf/pie-dashboard.json:/opt/pie-dashboard.json
      - ${PWD}/conf/grafana.ini:/etc/grafana/grafana.ini
    ports:
      - 3000:3000

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    network_mode: host
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"
    healthcheck:
      test: echo ruok | nc localhost 2181 || exit -1
      interval: 10s
      start_period: 60s

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    network_mode: host
    environment:
      KAFKA_ZOOKEEPER_CONNECT: localhost:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${META}:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_COMPRESSION_TYPE: lz4
      KAFKA_LOG_RETENTION_MS: 31104000000
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper: { condition: service_healthy }
    healthcheck:
      test: nc -z localhost 9092
      start_period: 60s
      interval: 5s

  loadgen:
    build: 
      context: ./py_gen
      network: host
      args:
        - https_proxy=http://127.0.0.1:7890
    entrypoint: python -u test_gen.py
    network_mode: host
    environment:
      KAFKA_ADDR: localhost
    volumes:
      - ./py_gen:/workdir
    depends_on:
      kafka: { condition: service_healthy }

  load-view:
    image: postgres:14-alpine
    network_mode: host
    entrypoint: psql -h localhost -p 5505 -d dev -U root -f /rise.sql
    volumes:
      - ./rise.sql:/rise.sql
    depends_on:
      - loadgen
      - frontend

volumes:
  kafka_data:
