syntax = "proto3";

package user;

import "common.proto";

option optimize_for = SPEED;

/// AuthInfo is the information required to login to a server.
message AuthInfo {
  enum EncryptionType {
    UNKNOWN = 0;
    PLAINTEXT = 1;
    SHA256 = 2;
    MD5 = 3;
  }
  EncryptionType encryption_type = 1;
  bytes encrypted_value = 2;
}

/// User defines a user in the system.
message UserInfo {
  string name = 1;
  bool is_supper = 2;
  bool can_create_db = 3;
  bool can_login = 4;
  AuthInfo auth_info = 5;

  /// Granted privileges will be only updated through the command of GRANT/REVOKE.
  repeated GrantPrivilege grant_privileges = 6;
}

/// GrantPrivilege defines a privilege granted to a user.
message GrantPrivilege {
  enum Action {
    UNKNOWN = 0;
    SELECT = 1;
    INSERT = 2;
    UPDATE = 3;
    DELETE = 4;
    CREATE = 5;
    CONNECT = 6;
  }

  message ActionWithGrantOption {
    Action action = 1;
    bool with_grant_option = 2;
    string granted_by = 3;
  }

  oneof object {
    uint32 database_id = 1;
    uint32 schema_id = 2;
    uint32 table_id = 3;
    uint32 source_id = 4;
    uint32 all_tables_schema_id = 5;
    uint32 all_sources_schema_id = 6;
  }
  repeated ActionWithGrantOption action_with_opts = 7;
}

message CreateUserRequest {
  UserInfo user = 1;
}

message CreateUserResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message DropUserRequest {
  string name = 1;
}

message DropUserResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message GrantPrivilegeRequest {
  repeated string users = 1;
  repeated GrantPrivilege privileges = 2;
  bool with_grant_option = 3;
  string granted_by = 4;
}

message GrantPrivilegeResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message RevokePrivilegeRequest {
  repeated string users = 1;
  repeated GrantPrivilege privileges = 2;
  string granted_by = 3;
  string revoke_by = 4;
  bool revoke_grant_option = 5;
  bool cascade = 6;
}

message RevokePrivilegeResponse {
  common.Status status = 1;
  uint64 version = 2;
}

service UserService {
  // TODO: add UpdateUser method to support `ALTER USER`, need more investigation. The FieldMask may be helpful:
  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/FieldMask.html.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc DropUser(DropUserRequest) returns (DropUserResponse);

  /// GrantPrivilege grants a privilege to a user.
  rpc GrantPrivilege(GrantPrivilegeRequest) returns (GrantPrivilegeResponse);
  /// RevokePrivilege revokes a privilege from a user.
  rpc RevokePrivilege(RevokePrivilegeRequest) returns (RevokePrivilegeResponse);
}
