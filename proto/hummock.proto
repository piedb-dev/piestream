syntax = "proto3";

package hummock;

import "common.proto";

option optimize_for = SPEED;

message SstableRefId {
  uint64 id = 1;
}

message SstableIdInfo {
  uint64 id = 1;
  // Timestamp when the sstable id is created, in seconds.
  uint64 id_create_timestamp = 2;
  // Timestamp when the sstable is tracked in meta node, in seconds.
  uint64 meta_create_timestamp = 3;
  // Timestamp when the sstable is marked to delete, in seconds.
  uint64 meta_delete_timestamp = 4;
}

message VNodeBitmap {
  uint32 table_id = 1;
  uint32 maplen = 2;
  bytes bitmap = 3;
}

message SstableInfo {
  uint64 id = 1;
  KeyRange key_range = 2;
  uint64 file_size = 3;
  repeated VNodeBitmap vnode_bitmaps = 4;
}

enum LevelType {
  NONOVERLAPPING = 0;
  OVERLAPPING = 1;
}

message Level {
  uint32 level_idx = 1;
  LevelType level_type = 2;
  repeated SstableInfo table_infos = 3;
}

message UncommittedEpoch {
  uint64 epoch = 1;
  repeated SstableInfo tables = 2;
}

message HummockVersionRefId {
  uint64 id = 1;
}

message HummockVersion {
  uint64 id = 1;
  repeated Level levels = 2;
  repeated UncommittedEpoch uncommitted_epochs = 3;
  uint64 max_committed_epoch = 4;
  // Snapshots with epoch less than the safe epoch have been GCed.
  // Reads against such an epoch will fail.
  uint64 safe_epoch = 5;
}

message HummockSnapshot {
  uint64 epoch = 1;
}

message AddTablesRequest {
  uint32 context_id = 1;
  repeated SstableInfo tables = 2;
  uint64 epoch = 3;
}

message AddTablesResponse {
  common.Status status = 1;
  HummockVersion version = 2;
}

message PinVersionRequest {
  uint32 context_id = 1;
  uint64 last_pinned = 2;
}

message PinVersionResponse {
  common.Status status = 1;
  HummockVersion pinned_version = 2;
}

message UnpinVersionRequest {
  uint32 context_id = 1;
  repeated uint64 pinned_version_ids = 2;
}

message UnpinVersionResponse {
  common.Status status = 1;
}

message PinSnapshotRequest {
  uint32 context_id = 1;
  uint64 last_pinned = 2;
}

message PinSnapshotResponse {
  common.Status status = 1;
  HummockSnapshot snapshot = 2;
}

message UnpinSnapshotRequest {
  uint32 context_id = 1;
  repeated HummockSnapshot snapshots = 2;
}

message UnpinSnapshotResponse {
  common.Status status = 1;
}

message KeyRange {
  bytes left = 1;
  bytes right = 2;
  bool inf = 3;
}

message TableSetStatistics {
  uint32 level_idx = 1;
  double size_gb = 2;
  uint64 cnt = 3;
}

message CompactMetrics {
  TableSetStatistics read_level_n = 1;
  TableSetStatistics read_level_nplus1 = 2;
  TableSetStatistics write = 3;
}

message CompactTask {
  // SSTs to be compacted, which will be removed from LSM after compaction
  repeated Level input_ssts = 1;
  // In ideal case, the compaction will generate `splits.len()` tables which have key range
  // corresponding to that in [`splits`], respectively
  repeated KeyRange splits = 2;
  // low watermark in 'ts-aware compaction'
  uint64 watermark = 3;
  // compacion output, which will be added to [`target_level`] of LSM after compaction
  repeated SstableInfo sorted_output_ssts = 4;
  // task id assigned by hummock storage service
  uint64 task_id = 5;
  // compaction output will be added to [`target_level`] of LSM after compaction
  uint32 target_level = 6;
  bool is_target_ultimate_and_leveling = 7;
  CompactMetrics metrics = 8;
  bool task_status = 9;
  repeated CompactionGroup.PrefixPair prefix_pairs = 10;
  // Hash mapping from virtual node to parallel unit. Since one compactor might deal with SSTs
  // with data for more than one relational state tables, here a vector is required.
  repeated common.ParallelUnitMapping vnode_mappings = 11;
}

message CompactionGroup {
  message PrefixPair {
    // key value with `prefix` belongs to compaction group `group_id`
    uint64 group_id = 1;
    bytes prefix = 2;
  }
}

message LevelHandler {
  message SstTask {
    uint64 task_id = 1;
    repeated uint64 ssts = 2;
  }
  uint32 level = 1;
  repeated SstTask tasks = 3;
}

message CompactStatus {
  repeated LevelHandler level_handlers = 1;
  uint64 next_compact_task_id = 2;
}

message CompactTaskAssignment {
  CompactTask compact_task = 1;
  uint32 context_id = 2;
}

message CompactTaskRefId {
  uint64 id = 1;
}

message GetCompactionTasksRequest {}

message GetCompactionTasksResponse {
  common.Status status = 1;
  CompactTask compact_task = 2;
}

message ReportCompactionTasksRequest {
  CompactTask compact_task = 1;
}

message ReportCompactionTasksResponse {
  common.Status status = 1;
}

message HummockContextRefId {
  uint32 id = 1;
}

message HummockPinnedVersion {
  uint32 context_id = 1;
  repeated uint64 version_id = 2;
}

message HummockPinnedSnapshot {
  uint32 context_id = 1;
  repeated uint64 snapshot_id = 2;
}

message HummockStaleSstables {
  uint64 version_id = 1;
  // sstable ids
  repeated uint64 id = 2;
}

message CommitEpochRequest {
  uint64 epoch = 1;
}

message CommitEpochResponse {
  common.Status status = 1;
}

message AbortEpochRequest {
  uint64 epoch = 1;
}

message AbortEpochResponse {
  common.Status status = 1;
}

message GetNewTableIdRequest {}

message GetNewTableIdResponse {
  common.Status status = 1;
  uint64 table_id = 2;
}

message SubscribeCompactTasksRequest {
  uint32 context_id = 1;
}

message SubscribeCompactTasksResponse {
  CompactTask compact_task = 1;
  VacuumTask vacuum_task = 2;
}

message VacuumTask {
  repeated uint64 sstable_ids = 1;
}

message ReportVacuumTaskRequest {
  VacuumTask vacuum_task = 1;
}

message ReportVacuumTaskResponse {
  common.Status status = 1;
}

service HummockManagerService {
  rpc PinVersion(PinVersionRequest) returns (PinVersionResponse);
  rpc UnpinVersion(UnpinVersionRequest) returns (UnpinVersionResponse);
  rpc AddTables(AddTablesRequest) returns (AddTablesResponse);
  rpc ReportCompactionTasks(ReportCompactionTasksRequest) returns (ReportCompactionTasksResponse);
  rpc PinSnapshot(PinSnapshotRequest) returns (PinSnapshotResponse);
  rpc UnpinSnapshot(UnpinSnapshotRequest) returns (UnpinSnapshotResponse);
  rpc CommitEpoch(CommitEpochRequest) returns (CommitEpochResponse);
  rpc AbortEpoch(AbortEpochRequest) returns (AbortEpochResponse);
  rpc GetNewTableId(GetNewTableIdRequest) returns (GetNewTableIdResponse);
  rpc SubscribeCompactTasks(SubscribeCompactTasksRequest) returns (stream SubscribeCompactTasksResponse);
  rpc ReportVacuumTask(ReportVacuumTaskRequest) returns (ReportVacuumTaskResponse);
}

service CompactorService {}
