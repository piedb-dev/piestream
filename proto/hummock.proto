syntax = "proto3";

package hummock;

import "common.proto";

option optimize_for = SPEED;

message SstableIdInfo {
  uint64 id = 1;
  // Timestamp when the sstable id is created, in seconds.
  uint64 id_create_timestamp = 2;
  // Timestamp when the sstable is tracked in meta node, in seconds.
  uint64 meta_create_timestamp = 3;
  // Timestamp when the sstable is marked to delete, in seconds.
  uint64 meta_delete_timestamp = 4;
}

message SstableInfo {
  uint64 id = 1;
  KeyRange key_range = 2;
  uint64 file_size = 3;
  repeated uint32 table_ids = 4;
  uint64 unit_id = 5;
}

enum LevelType {
  NONOVERLAPPING = 0;
  OVERLAPPING = 1;
}

message Level {
  uint32 level_idx = 1;
  LevelType level_type = 2;
  repeated SstableInfo table_infos = 3;
  uint64 total_file_size = 4;
}

message LevelDelta {
  uint32 level_idx = 1;
  repeated uint64 removed_table_ids = 2;
  repeated SstableInfo inserted_table_infos = 3;
}

message UncommittedEpoch {
  uint64 epoch = 1;
  repeated SstableInfo tables = 2;
}

message HummockVersion {
  message Levels {
    repeated Level levels = 1;
  }
  uint64 id = 1;
  // Levels of each compaction group
  map<uint64, Levels> levels = 2;
  uint64 max_committed_epoch = 4;
  // Snapshots with epoch less than the safe epoch have been GCed.
  // Reads against such an epoch will fail.
  uint64 safe_epoch = 5;
}

message HummockVersionDelta {
  message LevelDeltas {
    repeated LevelDelta level_deltas = 1;
  }
  uint64 id = 1;
  uint64 prev_id = 2;
  // Levels of each compaction group
  map<uint64, LevelDeltas> level_deltas = 3;
  uint64 max_committed_epoch = 4;
  // Snapshots with epoch less than the safe epoch have been GCed.
  // Reads against such an epoch will fail.
  uint64 safe_epoch = 5;
}

message HummockSnapshot {
  uint64 epoch = 1;
}

message PinVersionRequest {
  uint32 context_id = 1;
  uint64 last_pinned = 2;
}

message PinVersionResponse {
  common.Status status = 1;
  HummockVersion pinned_version = 2;
}

message UnpinVersionRequest {
  uint32 context_id = 1;
  repeated uint64 pinned_version_ids = 2;
}

message UnpinVersionResponse {
  common.Status status = 1;
}

message PinSnapshotRequest {
  uint32 context_id = 1;
  uint64 last_pinned = 2;
}

message PinSnapshotResponse {
  common.Status status = 1;
  HummockSnapshot snapshot = 2;
}

message UnpinSnapshotRequest {
  uint32 context_id = 1;
  repeated HummockSnapshot snapshots = 2;
}

message UnpinSnapshotResponse {
  common.Status status = 1;
}

message UnpinSnapshotBeforeRequest {
  uint32 context_id = 1;
  HummockSnapshot min_snapshot = 3;
}

message UnpinSnapshotBeforeResponse {
  common.Status status = 1;
}

message KeyRange {
  bytes left = 1;
  bytes right = 2;
  bool inf = 3;
}

message TableOption {
  uint32 ttl = 1;
}

message CompactTask {
  // SSTs to be compacted, which will be removed from LSM after compaction
  repeated Level input_ssts = 1;
  // In ideal case, the compaction will generate `splits.len()` tables which have key range
  // corresponding to that in [`splits`], respectively
  repeated KeyRange splits = 2;
  // low watermark in 'ts-aware compaction'
  uint64 watermark = 3;
  // compaction output, which will be added to [`target_level`] of LSM after compaction
  repeated SstableInfo sorted_output_ssts = 4;
  // task id assigned by hummock storage service
  uint64 task_id = 5;
  // compaction output will be added to [`target_level`] of LSM after compaction
  uint32 target_level = 6;
  bool is_target_ultimate_and_leveling = 7;
  bool task_status = 9;
  // Hash mapping from virtual node to parallel unit. Since one compactor might deal with SSTs
  // with data for more than one relational state tables, here a vector is required.
  repeated common.ParallelUnitMapping vnode_mappings = 11;
  // compaction group the task belongs to
  uint64 compaction_group_id = 12;
  // existing_table_ids for compaction drop key
  repeated uint32 existing_table_ids = 13;
  uint32 compression_algorithm = 14;
  uint64 target_file_size = 15;
  uint32 compaction_filter_mask = 16;
  map<uint32, TableOption> table_options = 17;
}

message LevelHandler {
  message SstTask {
    uint64 task_id = 1;
    repeated uint64 ssts = 2;
    uint64 total_file_size = 3;
  }
  uint32 level = 1;
  repeated SstTask tasks = 3;
}

message CompactStatus {
  uint64 compaction_group_id = 1;
  repeated LevelHandler level_handlers = 2;
  CompactionConfig compaction_config = 3;
}

message CompactionGroup {
  uint64 id = 1;
  repeated uint32 member_table_ids = 2;
  CompactionConfig compaction_config = 3;
  map<uint32, TableOption> table_id_to_options = 4;
}

message CompactTaskAssignment {
  CompactTask compact_task = 1;
  uint32 context_id = 2;
}

message GetCompactionTasksRequest {}

message GetCompactionTasksResponse {
  common.Status status = 1;
  CompactTask compact_task = 2;
}

message ReportCompactionTasksRequest {
  CompactTask compact_task = 1;
}

message ReportCompactionTasksResponse {
  common.Status status = 1;
}

message HummockPinnedVersion {
  uint32 context_id = 1;
  repeated uint64 version_id = 2;
}

message HummockPinnedSnapshot {
  uint32 context_id = 1;
  repeated uint64 snapshot_id = 2;
}

message HummockStaleSstables {
  uint64 version_id = 1;
  // sstable ids
  repeated uint64 id = 2;
}

message GetNewTableIdRequest {}

message GetNewTableIdResponse {
  common.Status status = 1;
  uint64 table_id = 2;
}

message SubscribeCompactTasksRequest {
  uint32 context_id = 1;
}

message SubscribeCompactTasksResponse {
  CompactTask compact_task = 1;
  VacuumTask vacuum_task = 2;
}

message VacuumTask {
  repeated uint64 sstable_ids = 1;
}

message ReportVacuumTaskRequest {
  VacuumTask vacuum_task = 1;
}

message ReportVacuumTaskResponse {
  common.Status status = 1;
}

message GetCompactionGroupsRequest {}

message GetCompactionGroupsResponse {
  common.Status status = 1;
  repeated CompactionGroup compaction_groups = 2;
}

message TriggerManualCompactionRequest {
  uint64 compaction_group_id = 1;
  KeyRange key_range = 2;
  uint32 table_id = 3;
  uint32 level = 4;
}

message TriggerManualCompactionResponse {
  common.Status status = 1;
}

message ListSstableIdInfosRequest {
  uint64 version_id = 1;
}

message ListSstableIdInfosResponse {
  common.Status status = 1;
  repeated SstableIdInfo sstable_id_infos = 2;
}

service HummockManagerService {
  rpc PinVersion(PinVersionRequest) returns (PinVersionResponse);
  rpc UnpinVersion(UnpinVersionRequest) returns (UnpinVersionResponse);
  rpc ReportCompactionTasks(ReportCompactionTasksRequest) returns (ReportCompactionTasksResponse);
  rpc PinSnapshot(PinSnapshotRequest) returns (PinSnapshotResponse);
  rpc UnpinSnapshot(UnpinSnapshotRequest) returns (UnpinSnapshotResponse);
  rpc UnpinSnapshotBefore(UnpinSnapshotBeforeRequest) returns (UnpinSnapshotBeforeResponse);
  rpc GetNewTableId(GetNewTableIdRequest) returns (GetNewTableIdResponse);
  rpc SubscribeCompactTasks(SubscribeCompactTasksRequest) returns (stream SubscribeCompactTasksResponse);
  rpc ReportVacuumTask(ReportVacuumTaskRequest) returns (ReportVacuumTaskResponse);
  rpc GetCompactionGroups(GetCompactionGroupsRequest) returns (GetCompactionGroupsResponse);
  rpc TriggerManualCompaction(TriggerManualCompactionRequest) returns (TriggerManualCompactionResponse);
  rpc ListSstableIdInfos(ListSstableIdInfosRequest) returns (ListSstableIdInfosResponse);
}

service CompactorService {}

message CompactionConfig {
  enum CompactionMode {
    RANGE = 0;
    CONSISTENT_HASH = 1;
  }
  uint64 max_bytes_for_level_base = 1;
  uint64 max_level = 2;
  uint64 max_bytes_for_level_multiplier = 3;
  uint64 max_compaction_bytes = 4;
  uint64 min_compaction_bytes = 5;
  uint64 level0_tigger_file_numer = 6;
  uint64 level0_tier_compact_file_number = 7;
  CompactionMode compaction_mode = 8;
  repeated string compression_algorithm = 9;
  uint64 target_file_size_base = 10;
  uint32 compaction_filter_mask = 11;
}
