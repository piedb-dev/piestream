# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    create table t1 (v1 int, v2 int) with (appendonly = true);
    select v1, max(v2) as mx2 from t1 group by v1;
  stream_plan: |
    StreamMaterialize { columns: [v1, mx2], pk_columns: [v1] }
    └─StreamProject { exprs: [t1.v1, max(t1.v2)] }
      └─StreamAppendOnlyHashAgg { group_key: [t1.v1], aggs: [count, max(t1.v2)] }
        └─StreamExchange { dist: HashShard(t1.v1) }
          └─StreamTableScan { table: t1, columns: [t1.v1, t1.v2, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
- sql: |
    create table t1 (v1 int, v2 int) with (appendonly = true);
    create table t2 (v1 int, v3 int) with (appendonly = true);
    select t1.v1 as id, v2, v3 from t1 join t2 on t1.v1=t2.v1;
  stream_plan: |
    StreamMaterialize { columns: [id, v2, v3, t1._row_id(hidden), t2._row_id(hidden), t2.v1(hidden)], pk_columns: [t1._row_id, t2._row_id, id, t2.v1] }
    └─StreamAppendOnlyHashJoin { type: Inner, predicate: t1.v1 = t2.v1, append_only: true, output: [t1.v1, t1.v2, t2.v3, t1._row_id, t2._row_id, t2.v1] }
      ├─StreamExchange { dist: HashShard(t1.v1) }
      | └─StreamTableScan { table: t1, columns: [t1.v1, t1.v2, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
      └─StreamExchange { dist: HashShard(t2.v1) }
        └─StreamTableScan { table: t2, columns: [t2.v1, t2.v3, t2._row_id], pk: [t2._row_id], dist: UpstreamHashShard(t2._row_id) }
- sql: |
    create table t1 (v1 int, v2 int) with (appendonly = true);
    select v1 from t1 order by v1 limit 3 offset 3;
  stream_plan: |
    StreamMaterialize { columns: [v1, t1._row_id(hidden)], pk_columns: [t1._row_id], order_descs: [v1, t1._row_id] }
    └─StreamAppendOnlyTopN { order: "[t1.v1 ASC]", limit: 3, offset: 3 }
      └─StreamExchange { dist: Single }
        └─StreamTableScan { table: t1, columns: [t1.v1, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
- sql: |
    create table t1 (v1 int, v2 int) with (appendonly = true);
    select max(v1) as max_v1 from t1;
  stream_plan: |
    StreamMaterialize { columns: [max_v1], pk_columns: [] }
    └─StreamProject { exprs: [max(max(t1.v1))] }
      └─StreamAppendOnlyGlobalSimpleAgg { aggs: [sum(count), max(max(t1.v1))] }
        └─StreamExchange { dist: Single }
          └─StreamStatelessLocalSimpleAgg { aggs: [count, max(t1.v1)] }
            └─StreamTableScan { table: t1, columns: [t1.v1, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
