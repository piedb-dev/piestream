# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from t
  logical_plan: |
    LogicalProject { exprs: [$1] }
      LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalScan { table: t, columns: [v1] }
- sql: |
    /* filter */
    create table t (v1 bigint, v2 double precision, v3 int);
    select v1 from t where v2 > 2
  logical_plan: |
    LogicalProject { exprs: [$1] }
      LogicalFilter { predicate: ($2 > 2:Int32) }
        LogicalScan { table: t, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalScan { table: t, output_columns: [v1], required_columns: [$1:v1, $2:v2], predicate: ($2 > 2:Int32) }
- sql: |
    /* join */
    create table t1 (v1 int not null, v2 int not null, v3 int);
    create table t2 (v1 int not null, v2 int not null, v3 int);
    select t1.v1, t2.v1 from t1 join t2 on t1.v2 = t2.v2;
  logical_plan: |
    LogicalProject { exprs: [$1, $5] }
      LogicalJoin { type: Inner, on: ($2 = $6), output_indices: all }
        LogicalScan { table: t1, columns: [_row_id, v1, v2, v3] }
        LogicalScan { table: t2, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalJoin { type: Inner, on: ($1 = $3), output_indices: [0, 2] }
      LogicalScan { table: t1, columns: [v1, v2] }
      LogicalScan { table: t2, columns: [v1, v2] }
- sql: |
    /* agg */
    create table t (v1 bigint, v2 double precision, v3 int);
    select count(v1) from t where v2 > 2
  logical_plan: |
    LogicalProject { exprs: [$0] }
      LogicalAgg { group_keys: [], agg_calls: [count($0)] }
        LogicalProject { exprs: [$1] }
          LogicalFilter { predicate: ($2 > 2:Int32) }
            LogicalScan { table: t, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalAgg { group_keys: [], agg_calls: [count($0)] }
      LogicalScan { table: t, output_columns: [v1], required_columns: [$1:v1, $2:v2], predicate: ($2 > 2:Int32) }
- sql: |
    /* constant */
    create table t (v1 bigint, v2 double precision, v3 int);
    select 1 from t
  logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalScan { table: t, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalScan { table: t, columns: [] }
- sql: |
    /* constant + filter */
    create table t (v1 bigint, v2 double precision, v3 int);
    select 1 from t where v2>1
  logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalFilter { predicate: ($2 > 1:Int32) }
        LogicalScan { table: t, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalScan { table: t, output_columns: [], required_columns: [$2:v2], predicate: ($2 > 1:Int32) }
- sql: |
    /* constant agg */
    create table t (v1 bigint, v2 double precision, v3 int);
    select count(1) from t
  logical_plan: |
    LogicalProject { exprs: [$0] }
      LogicalAgg { group_keys: [], agg_calls: [count($0)] }
        LogicalProject { exprs: [1:Int32] }
          LogicalScan { table: t, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalAgg { group_keys: [], agg_calls: [count($0)] }
      LogicalProject { exprs: [1:Int32] }
        LogicalScan { table: t, columns: [] }
- sql: |
    /* constant agg + filter */
    create table t (v1 bigint, v2 double precision, v3 int);
    select count(1) from t where v2>1
  logical_plan: |
    LogicalProject { exprs: [$0] }
      LogicalAgg { group_keys: [], agg_calls: [count($0)] }
        LogicalProject { exprs: [1:Int32] }
          LogicalFilter { predicate: ($2 > 1:Int32) }
            LogicalScan { table: t, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalAgg { group_keys: [], agg_calls: [count($0)] }
      LogicalProject { exprs: [1:Int32] }
        LogicalScan { table: t, output_columns: [], required_columns: [$2:v2], predicate: ($2 > 1:Int32) }
- sql: |
    /* join + filter */
    create table t1 (v1 int not null, v2 int not null, v3 int);
    create table t2 (v1 int not null, v2 int not null, v3 int);
    select t1.v1, t2.v1 from t1 join t2 on t1.v2 = t2.v2 where t1.v3 < 1;
  logical_plan: |
    LogicalProject { exprs: [$1, $5] }
      LogicalFilter { predicate: ($3 < 1:Int32) }
        LogicalJoin { type: Inner, on: ($2 = $6), output_indices: all }
          LogicalScan { table: t1, columns: [_row_id, v1, v2, v3] }
          LogicalScan { table: t2, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalJoin { type: Inner, on: ($1 = $3), output_indices: [0, 2] }
      LogicalScan { table: t1, output_columns: [v1, v2], required_columns: [$1:v1, $2:v2, $3:v3], predicate: ($3 < 1:Int32) }
      LogicalScan { table: t2, columns: [v1, v2] }
- sql: |
    /* mixed */
    create table t (v1 bigint, v2 double precision, v3 int);
    select count(1), count(v1) from t where v2>1
  logical_plan: |
    LogicalProject { exprs: [$0, $1] }
      LogicalAgg { group_keys: [], agg_calls: [count($0), count($1)] }
        LogicalProject { exprs: [1:Int32, $1] }
          LogicalFilter { predicate: ($2 > 1:Int32) }
            LogicalScan { table: t, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalAgg { group_keys: [], agg_calls: [count($0), count($1)] }
      LogicalProject { exprs: [1:Int32, $0] }
        LogicalScan { table: t, output_columns: [v1], required_columns: [$1:v1, $2:v2], predicate: ($2 > 1:Int32) }
- sql: |
    /* hop window, time_col not selected */
    create table t1 (a int, b int, created_at timestamp);
    select a, window_end from hop(t1, created_at, interval '15' minute, interval '30' minute)
  logical_plan: |
    LogicalProject { exprs: [$1, $5] }
      LogicalHopWindow { time_col: $3, slide: 00:15:00, size: 00:30:00, output_indices: all }
        LogicalScan { table: t1, columns: [_row_id, a, b, created_at] }
  optimized_logical_plan: |
    LogicalHopWindow { time_col: $1, slide: 00:15:00, size: 00:30:00, output_indices: [0, 3] }
      LogicalScan { table: t1, columns: [a, created_at] }
  batch_plan: |
    BatchHopWindow { time_col: $1, slide: 00:15:00, size: 00:30:00, output_indices: [0, 3] }
      BatchExchange { order: [], dist: Single }
        BatchScan { table: t1, columns: [a, created_at] }
  stream_plan: |
    StreamMaterialize { columns: [a, window_end, _row_id(hidden)], pk_columns: [_row_id, window_end] }
      StreamHopWindow { time_col: $1, slide: 00:15:00, size: 00:30:00, output_indices: [0, 4, 2] }
        StreamTableScan { table: t1, columns: [a, created_at, _row_id], pk_indices: [2] }
