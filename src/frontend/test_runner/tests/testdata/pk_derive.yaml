# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    create table t1 (id int, v1 int);
    create table t2 (id int, v2 int);
    SELECT Tone.max_v1, Ttwo.max_v2
    FROM (
        SELECT
            max(v1) as max_v1, id
        FROM t1
        GROUP BY
            id
        ) AS Tone
    JOIN (
        SELECT
            max(v2) as max_v2, id
        FROM t2
        GROUP BY
            id
        ) AS Ttwo
    ON
        Tone.id = Ttwo.id;
  stream_plan: |
    StreamMaterialize { columns: [max_v1, max_v2, id(hidden), id#1(hidden)], pk_columns: [id, id#1] }
      StreamHashJoin { type: Inner, predicate: $1 = $3, output_indices: [0, 2, 1, 3] }
        StreamProject { exprs: [$2, $0] }
          StreamHashAgg { group_keys: [$0], aggs: [count, max($1)] }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t1, columns: [id, v1, _row_id], pk_indices: [2] }
        StreamProject { exprs: [$2, $0] }
          StreamHashAgg { group_keys: [$0], aggs: [count, max($1)] }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t2, columns: [id, v2, _row_id], pk_indices: [2] }
- sql: |
    create table t (id int, v int);
    SELECT Tone.max_v, Ttwo.min_v
    FROM (
        SELECT
            max(v) as max_v, id
        FROM t
        GROUP BY
            id
        ) AS Tone
    JOIN (
        SELECT
            min(v) as min_v, id
        FROM t
        GROUP BY
            id
        ) AS Ttwo
    ON
        Tone.id = Ttwo.id;
  stream_plan: |
    StreamMaterialize { columns: [max_v, min_v, id(hidden), id#1(hidden)], pk_columns: [id, id#1] }
      StreamHashJoin { type: Inner, predicate: $1 = $3, output_indices: [0, 2, 1, 3] }
        StreamProject { exprs: [$2, $0] }
          StreamHashAgg { group_keys: [$0], aggs: [count, max($1)] }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t, columns: [id, v, _row_id], pk_indices: [2] }
        StreamProject { exprs: [$2, $0] }
          StreamHashAgg { group_keys: [$0], aggs: [count, min($1)] }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t, columns: [id, v, _row_id], pk_indices: [2] }
- sql: |
    create table t (v1 varchar, v2 varchar, v3 varchar);
    select
        *
    from
        t
    group by
        v1,
        v2,
        v3;
  optimized_logical_plan: |
    LogicalAgg { group_keys: [0, 1, 2], agg_calls: [] }
      LogicalScan { table: t, columns: [v1, v2, v3] }
  stream_plan: |
    StreamMaterialize { columns: [v1, v2, v3, agg#0(hidden)], pk_columns: [v1, v2, v3] }
      StreamHashAgg { group_keys: [$0, $1, $2], aggs: [count] }
        StreamExchange { dist: HashShard([0, 1, 2]) }
          StreamTableScan { table: t, columns: [v1, v2, v3, _row_id], pk_indices: [3] }
- sql: |
    create table t (v1 varchar, v2 varchar, v3 varchar);
    create materialized view mv as
    select
        *
    from
        t
    group by
        v1,
        v2,
        v3;
    select
        v1
    from
        mv
    where
        v3 = 'world' or v3 = 'hello';
  optimized_logical_plan: |
    LogicalScan { table: mv, output_columns: [v1], required_columns: [$0:v1, $2:v3], predicate: (($2 = 'world':Varchar) OR ($2 = 'hello':Varchar)) }
  stream_plan: |
    StreamMaterialize { columns: [v1, v2(hidden), v3(hidden)], pk_columns: [v1, v2, v3] }
      StreamFilter { predicate: (($2 = 'world':Varchar) OR ($2 = 'hello':Varchar)) }
        StreamTableScan { table: mv, columns: [v1, v2, v3], pk_indices: [0, 1, 2] }
