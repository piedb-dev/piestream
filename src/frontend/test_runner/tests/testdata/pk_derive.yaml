- sql: |
    create table t1 (id int, v1 int);
    create table t2 (id int, v2 int);
    SELECT Tone.max_v1, Ttwo.max_v2
    FROM (
        SELECT
            max(v1) as max_v1, id
        FROM t1
        GROUP BY
            id
        ) AS Tone
    JOIN (
        SELECT
            max(v2) as max_v2, id
        FROM t2
        GROUP BY
            id
        ) AS Ttwo
    ON
        Tone.id = Ttwo.id;
  stream_plan: |
    StreamMaterialize { columns: [max_v1, max_v2, id(hidden), id#1(hidden)], pk_columns: [id, id#1] }
      StreamProject { exprs: [$0, $2, $1, $3] }
        StreamHashJoin { type: Inner, predicate: $1 = $3 }
          StreamProject { exprs: [$2, $0] }
            StreamHashAgg { group_keys: [$0], aggs: [count, max($1)] }
              StreamExchange { dist: HashShard([0]) }
                StreamTableScan { table: t1, columns: [id, v1, _row_id], pk_indices: [2] }
          StreamProject { exprs: [$2, $0] }
            StreamHashAgg { group_keys: [$0], aggs: [count, max($1)] }
              StreamExchange { dist: HashShard([0]) }
                StreamTableScan { table: t2, columns: [id, v2, _row_id], pk_indices: [2] }
- sql: |
    create table t (id int, v int);
    SELECT Tone.max_v, Ttwo.min_v
    FROM (
        SELECT
            max(v) as max_v, id
        FROM t
        GROUP BY
            id
        ) AS Tone
    JOIN (
        SELECT
            min(v) as min_v, id
        FROM t
        GROUP BY
            id
        ) AS Ttwo
    ON
        Tone.id = Ttwo.id;
  stream_plan: |
    StreamMaterialize { columns: [max_v, min_v, id(hidden), id#1(hidden)], pk_columns: [id, id#1] }
      StreamProject { exprs: [$0, $2, $1, $3] }
        StreamHashJoin { type: Inner, predicate: $1 = $3 }
          StreamProject { exprs: [$2, $0] }
            StreamHashAgg { group_keys: [$0], aggs: [count, max($1)] }
              StreamExchange { dist: HashShard([0]) }
                StreamTableScan { table: t, columns: [id, v, _row_id], pk_indices: [2] }
          StreamProject { exprs: [$2, $0] }
            StreamHashAgg { group_keys: [$0], aggs: [count, min($1)] }
              StreamExchange { dist: HashShard([0]) }
                StreamTableScan { table: t, columns: [id, v, _row_id], pk_indices: [2] }
