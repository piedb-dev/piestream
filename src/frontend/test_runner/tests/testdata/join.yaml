- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v3 int, v4 int);
    create table t3 (v5 int, v6 int);
    select * from t1, t2, t3 where t1.v1 = t2.v3 and t1.v1 = t3.v5;
  logical_plan: |
    LogicalProject { exprs: [$1, $2, $4, $5, $7, $8] }
      LogicalFilter { predicate: ($1 = $4) AND ($1 = $7) }
        LogicalJoin { type: Inner, on: true }
          LogicalJoin { type: Inner, on: true }
            LogicalScan { table: t1, columns: [_row_id, v1, v2] }
            LogicalScan { table: t2, columns: [_row_id, v3, v4] }
          LogicalScan { table: t3, columns: [_row_id, v5, v6] }
  stream_plan: |
    StreamMaterialize { columns: [v1, v2, _row_id(hidden), v3, v4, _row_id#1(hidden), v5, v6, _row_id#2(hidden)], pk_columns: [_row_id, _row_id#1, _row_id#2] }
      StreamExchange { dist: HashShard([2, 5, 8]) }
        StreamHashJoin { type: Inner, predicate: $0 = $6 }
          StreamHashJoin { type: Inner, predicate: $0 = $3 }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t1, columns: [v1, v2, _row_id], pk_indices: [2] }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t2, columns: [v3, v4, _row_id], pk_indices: [2] }
          StreamExchange { dist: HashShard([0]) }
            StreamTableScan { table: t3, columns: [v5, v6, _row_id], pk_indices: [2] }
- sql: |
    /* self join */
    create table t (v1 int, v2 int);
    select t1.v1 as t1v1, t2.v1 as t2v1 from t t1 join t t2 on t1.v1 = t2.v1;
  logical_plan: |
    LogicalProject { exprs: [$1, $4] }
      LogicalJoin { type: Inner, on: ($1 = $4) }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [t1v1, _row_id(hidden), t2v1, _row_id#1(hidden)], pk_columns: [_row_id, _row_id#1] }
      StreamExchange { dist: HashShard([1, 3]) }
        StreamHashJoin { type: Inner, predicate: $0 = $2 }
          StreamExchange { dist: HashShard([0]) }
            StreamTableScan { table: t, columns: [v1, _row_id], pk_indices: [1] }
          StreamExchange { dist: HashShard([0]) }
            StreamTableScan { table: t, columns: [v1, _row_id], pk_indices: [1] }
- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    create table t3 (v1 int, v2 int);
    select t1.v1 as t1_v1, t1.v2 as t1_v2, t2.v1 as t2_v1, t2.v2 as t2_v2, t3.v1 as t3_v1, t3.v2 as t3_v2 from t1 join t2 on (t1.v1 = t2.v1) join t3 on (t2.v2 = t3.v2);
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchHashJoin { type: Inner, predicate: $3 = $5 }
        BatchExchange { order: [], dist: HashShard([3]) }
          BatchHashJoin { type: Inner, predicate: $0 = $2 }
            BatchExchange { order: [], dist: HashShard([0]) }
              BatchScan { table: t1, columns: [v1, v2] }
            BatchExchange { order: [], dist: HashShard([0]) }
              BatchScan { table: t2, columns: [v1, v2] }
        BatchExchange { order: [], dist: HashShard([1]) }
          BatchScan { table: t3, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [t1_v1, t1_v2, _row_id(hidden), t2_v1, t2_v2, _row_id#1(hidden), t3_v1, t3_v2, _row_id#2(hidden)], pk_columns: [_row_id, _row_id#1, _row_id#2] }
      StreamExchange { dist: HashShard([2, 5, 8]) }
        StreamHashJoin { type: Inner, predicate: $4 = $7 }
          StreamExchange { dist: HashShard([4]) }
            StreamHashJoin { type: Inner, predicate: $0 = $3 }
              StreamExchange { dist: HashShard([0]) }
                StreamTableScan { table: t1, columns: [v1, v2, _row_id], pk_indices: [2] }
              StreamExchange { dist: HashShard([0]) }
                StreamTableScan { table: t2, columns: [v1, v2, _row_id], pk_indices: [2] }
          StreamExchange { dist: HashShard([1]) }
            StreamTableScan { table: t3, columns: [v1, v2, _row_id], pk_indices: [2] }
- sql: |
    create table t1 (v1 int not null, v2 int not null);
    create table t2 (v1 int not null, v2 int not null);
    select t1.v2 as t1_v2, t2.v2 as t2_v2 from t1 join t2 on t1.v1 = t2.v1;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$1, $3] }
        BatchHashJoin { type: Inner, predicate: $0 = $2 }
          BatchExchange { order: [], dist: HashShard([0]) }
            BatchScan { table: t1, columns: [v1, v2] }
          BatchExchange { order: [], dist: HashShard([0]) }
            BatchScan { table: t2, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [t1_v2, t2_v2, _row_id(hidden), _row_id#1(hidden)], pk_columns: [_row_id, _row_id#1] }
      StreamExchange { dist: HashShard([2, 3]) }
        StreamProject { exprs: [$1, $4, $2, $5] }
          StreamHashJoin { type: Inner, predicate: $0 = $3 }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t1, columns: [v1, v2, _row_id], pk_indices: [2] }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t2, columns: [v1, v2, _row_id], pk_indices: [2] }
- sql: |
    create table t1 (v1 int not null, v2 int not null);
    create table t2 (v1 int not null, v2 int not null);
    select t1.v2 as t1_v2, t2.v2 as t2_v2 from t1 join t2 on t1.v1 > t2.v1 and t1.v2 < 10;
  batch_plan: |
    BatchProject { exprs: [$1, $3] }
      BatchNestedLoopJoin { type: Inner, predicate: ($0 > $2) }
        BatchExchange { order: [], dist: Single }
          BatchFilter { predicate: ($1 < 10:Int32) }
            BatchScan { table: t1, columns: [v1, v2] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t2, columns: [v1, v2] }
- sql: |
    create table t1 (v1 int, v2 float);
    create table t2 (v3 int, v4 numeric, v5 bigint);
    select * from t1, t2 where t1.v1 = t2.v3;
  stream_plan: |
    StreamMaterialize { columns: [v1, v2, _row_id(hidden), v3, v4, v5, _row_id#1(hidden)], pk_columns: [_row_id, _row_id#1] }
      StreamExchange { dist: HashShard([2, 6]) }
        StreamDeltaHashJoin { type: Inner, predicate: $0 = $3 }
          StreamExchange { dist: HashShard([0]) }
            StreamTableScan { table: t1, columns: [v1, v2, _row_id], pk_indices: [2] }
          StreamExchange { dist: HashShard([0]) }
            StreamTableScan { table: t2, columns: [v3, v4, v5, _row_id], pk_indices: [3] }
  with_config_map:
    RW_FORCE_DELTA_JOIN: "true"
- sql: |
    /* Only push to left */
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    select * from t1 left join t2 where t1.v2 > 100;
  optimized_logical_plan: |
    LogicalJoin { type: LeftOuter, on: true }
      LogicalFilter { predicate: ($1 > 100:Int32) }
        LogicalScan { table: t1, columns: [v1, v2] }
      LogicalScan { table: t2, columns: [v1, v2] }
- sql: |
    /* Only push to right */
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    select * from t1 right join t2 where t2.v2 > 100;
  optimized_logical_plan: |
    LogicalJoin { type: RightOuter, on: true }
      LogicalScan { table: t1, columns: [v1, v2] }
      LogicalFilter { predicate: ($1 > 100:Int32) }
        LogicalScan { table: t2, columns: [v1, v2] }
- sql: |
    /* Push to left, right and on */
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    select * from t1, t2 where t1.v1 > 100 and t2.v1 < 1000 and t1.v2 = t2.v2;
  optimized_logical_plan: |
    LogicalJoin { type: Inner, on: ($1 = $3) }
      LogicalFilter { predicate: ($0 > 100:Int32) }
        LogicalScan { table: t1, columns: [v1, v2] }
      LogicalFilter { predicate: ($0 < 1000:Int32) }
        LogicalScan { table: t2, columns: [v1, v2] }
