# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    /* desc */
    create table t (v1 bigint, v2 double precision);
    select * from t order by v1 desc;
  batch_plan: |
    BatchExchange { order: [$0 DESC], dist: Single }
      BatchSort { order: [$0 DESC] }
        BatchScan { table: t, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [v1, v2, _row_id(hidden)], pk_columns: [_row_id], order_descs: [v1, _row_id] }
      StreamTableScan { table: t, columns: [v1, v2, _row_id], pk_indices: [2] }
- sql: |
    /* output names are not quailified after table names */
    create table t (v1 bigint, v2 double precision);
    select t.* from t order by v1;
  batch_plan: |
    BatchExchange { order: [$1 ASC], dist: Single }
      BatchSort { order: [$1 ASC] }
        BatchScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1, v1+1 from t order by v1;
  batch_plan: |
    BatchExchange { order: [$0 ASC], dist: Single }
      BatchSort { order: [$0 ASC] }
        BatchProject { exprs: [$0, ($0 + 1:Int32)] }
          BatchScan { table: t, columns: [v1] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select t.v1 from t order by v1;
  batch_plan: |
    BatchExchange { order: [$0 ASC], dist: Single }
      BatchSort { order: [$0 ASC] }
        BatchScan { table: t, columns: [v1] }
- sql: |
    /* order by output alias */
    create table t (v1 bigint, v2 double precision);
    select v1 as a1 from t order by a1;
  batch_plan: |
    BatchExchange { order: [$0 ASC], dist: Single }
      BatchSort { order: [$0 ASC] }
        BatchScan { table: t, columns: [v1] }
- sql: |
    /* order by ambiguous */
    create table t (v1 bigint, v2 double precision);
    select v1 as a, v2 as a from t order by a;
  binder_error: 'Bind error: ORDER BY "a" is ambiguous'
- sql: |
    /* ambiguous output name is okay as long as not used in order by */
    create table t (v1 bigint, v2 double precision);
    select v1 as a, v2 as a from t order by 2;
  batch_plan: |
    BatchExchange { order: [$1 ASC], dist: Single }
      BatchSort { order: [$1 ASC] }
        BatchScan { table: t, columns: [v1, v2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by 1+1;
  batch_plan: |
    BatchProject { exprs: [$0, $1] }
      BatchExchange { order: [$2 ASC], dist: Single }
        BatchSort { order: [$2 ASC] }
          BatchProject { exprs: [$0, $1, (1:Int32 + 1:Int32)] }
            BatchScan { table: t, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [v1, v2, expr#2(hidden), _row_id(hidden)], pk_columns: [_row_id], order_descs: [expr#2, _row_id] }
      StreamProject { exprs: [$0, $1, (1:Int32 + 1:Int32), $2] }
        StreamTableScan { table: t, columns: [v1, v2, _row_id], pk_indices: [2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by v;
  binder_error: 'Item not found: Invalid column: v'
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by v1 desc limit 5;
  batch_plan: |
    BatchTopN { order: [$0 DESC], limit: 5, offset: 0 }
      BatchExchange { order: [], dist: Single }
        BatchScan { table: t, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [v1, v2, _row_id(hidden)], pk_columns: [_row_id], order_descs: [v1, _row_id] }
      StreamTopN { order: [$0 DESC], limit: 5, offset: 0 }
        StreamExchange { dist: Single }
          StreamTableScan { table: t, columns: [v1, v2, _row_id], pk_indices: [2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by v1 desc limit 5 offset 7;
  batch_plan: |
    BatchTopN { order: [$0 DESC], limit: 5, offset: 7 }
      BatchExchange { order: [], dist: Single }
        BatchScan { table: t, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [v1, v2, _row_id(hidden)], pk_columns: [_row_id], order_descs: [v1, _row_id] }
      StreamTopN { order: [$0 DESC], limit: 5, offset: 7 }
        StreamExchange { dist: Single }
          StreamTableScan { table: t, columns: [v1, v2, _row_id], pk_indices: [2] }
- sql: |
    /* order by expression that would be valid in select list */
    create table t (x int, y int, z int);
    select x, y from t order by x + y, z;
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, $1, ($0 + $1), $2] }
      LogicalScan { table: t, columns: [x, y, z] }
  batch_plan: |
    BatchProject { exprs: [$0, $1] }
      BatchExchange { order: [$2 ASC, $3 ASC], dist: Single }
        BatchSort { order: [$2 ASC, $3 ASC] }
          BatchProject { exprs: [$0, $1, ($0 + $1), $2] }
            BatchScan { table: t, columns: [x, y, z] }
  stream_plan: |
    StreamMaterialize { columns: [x, y, expr#2(hidden), z(hidden), _row_id(hidden)], pk_columns: [_row_id], order_descs: [expr#2, z, _row_id] }
      StreamProject { exprs: [$0, $1, ($0 + $1), $2, $3] }
        StreamTableScan { table: t, columns: [x, y, z, _row_id], pk_indices: [3] }
- sql: |
    /* order by the number of an output column */
    create table t (x int, y int);
    select x, y from t order by 2;
  optimized_logical_plan: |
    LogicalScan { table: t, columns: [x, y] }
  batch_plan: |
    BatchExchange { order: [$1 ASC], dist: Single }
      BatchSort { order: [$1 ASC] }
        BatchScan { table: t, columns: [x, y] }
- sql: |
    /* index exceeds the number of select items */
    create table t (x int, y int);
    select x from t order by 2;
  binder_error: 'Invalid input syntax: Invalid value in ORDER BY: 2'
- sql: |
    /* an output column name cannot be used in an expression */
    create table t (x int, y int);
    select x + y as sum from t order by sum + 1;
  binder_error: 'Item not found: Invalid column: sum'
- sql: |
    /* select distinct with order by expressions not appear in select list */
    create table t (x int, y int);
    select distinct x from t order by y;
  planner_error: 'Invalid input syntax: for SELECT DISTINCT, ORDER BY expressions must appear in select list'
