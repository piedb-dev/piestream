# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    select (select 1);
  logical_plan: |
    LogicalProject { exprs: [$0] }
      LogicalJoin { type: LeftOuter, on: true, output_indices: all }
        LogicalValues { rows: [[]], schema: Schema { fields: [] } }
        LogicalProject { exprs: [1:Int32] }
          LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t(x int);
    select (select x from t), 1 from t;
  logical_plan: |
    LogicalProject { exprs: [$2, 1:Int32] }
      LogicalJoin { type: LeftOuter, on: true, output_indices: all }
        LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [$1] }
          LogicalScan { table: t, columns: [_row_id, x] }
- sql: |
    create table t(x int);
    select (select x from t) + 1 from t;
  logical_plan: |
    LogicalProject { exprs: [($2 + 1:Int32)] }
      LogicalJoin { type: LeftOuter, on: true, output_indices: all }
        LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [$1] }
          LogicalScan { table: t, columns: [_row_id, x] }
- sql: |
    create table t(x int);
    select (select x from t), (select 1);
  logical_plan: |
    LogicalProject { exprs: [$0, $1] }
      LogicalJoin { type: LeftOuter, on: true, output_indices: all }
        LogicalJoin { type: LeftOuter, on: true, output_indices: all }
          LogicalValues { rows: [[]], schema: Schema { fields: [] } }
          LogicalProject { exprs: [$1] }
            LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [1:Int32] }
          LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t(x int);
    select x + (select x + (select x as v1 from t) as v2 from t) as v3 from t;
  logical_plan: |
    LogicalProject { exprs: [($1 + $2)] }
      LogicalJoin { type: LeftOuter, on: true, output_indices: all }
        LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [($1 + $2)] }
          LogicalJoin { type: LeftOuter, on: true, output_indices: all }
            LogicalScan { table: t, columns: [_row_id, x] }
            LogicalProject { exprs: [$1] }
              LogicalScan { table: t, columns: [_row_id, x] }
- sql: |
    select (select 1, 2);
  binder_error: 'Bind error: Subquery must return only one column'
- sql: |
    create table t(x int);
    select 1 where exists (select * from t);
  logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalJoin { type: LeftSemi, on: true, output_indices: all }
        LogicalValues { rows: [[]], schema: Schema { fields: [] } }
        LogicalProject { exprs: [$1] }
          LogicalScan { table: t, columns: [_row_id, x] }
  optimized_logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalJoin { type: LeftSemi, on: true, output_indices: all }
        LogicalValues { rows: [[]], schema: Schema { fields: [] } }
        LogicalScan { table: t, columns: [] }
- sql: |
    create table t(x int);
    select 1 where not exists (select * from t);
  logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalJoin { type: LeftAnti, on: true, output_indices: all }
        LogicalValues { rows: [[]], schema: Schema { fields: [] } }
        LogicalProject { exprs: [$1] }
          LogicalScan { table: t, columns: [_row_id, x] }
  optimized_logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalJoin { type: LeftAnti, on: true, output_indices: all }
        LogicalValues { rows: [[]], schema: Schema { fields: [] } }
        LogicalScan { table: t, columns: [] }
- sql: |
    create table t1(x int);
    create table t2(x int);
    select x from t1 where exists (select x from t2);
  logical_plan: |
    LogicalProject { exprs: [$1] }
      LogicalJoin { type: LeftSemi, on: true, output_indices: all }
        LogicalScan { table: t1, columns: [_row_id, x] }
        LogicalProject { exprs: [$1] }
          LogicalScan { table: t2, columns: [_row_id, x] }
- sql: |
    create table t(x int);
    select x from t where exists (select * from t);
  logical_plan: |
    LogicalProject { exprs: [$1] }
      LogicalJoin { type: LeftSemi, on: true, output_indices: all }
        LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [$1] }
          LogicalScan { table: t, columns: [_row_id, x] }
- sql: |
    create table t1(x int);
    create table t2(x int);
    select x from t1 where x > (select x from t2)
  logical_plan: |
    LogicalProject { exprs: [$1] }
      LogicalFilter { predicate: ($1 > $2) }
        LogicalJoin { type: LeftOuter, on: true, output_indices: all }
          LogicalScan { table: t1, columns: [_row_id, x] }
          LogicalProject { exprs: [$1] }
            LogicalScan { table: t2, columns: [_row_id, x] }
- sql: |
    select 1 where 1>0 and exists (values (1))
  logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalFilter { predicate: (1:Int32 > 0:Int32) }
        LogicalJoin { type: LeftSemi, on: true, output_indices: all }
          LogicalValues { rows: [[]], schema: Schema { fields: [] } }
          LogicalValues { rows: [[1:Int32]], schema: Schema { fields: [:Int32] } }
- sql: |
    select 1 where (not exists (values (1))) and (1>0 or exists (values (1)))
  logical_plan: |
    LogicalProject { exprs: [1:Int32] }
      LogicalFilter { predicate: ((1:Int32 > 0:Int32) OR $0) }
        LogicalJoin { type: LeftOuter, on: true, output_indices: all }
          LogicalJoin { type: LeftAnti, on: true, output_indices: all }
            LogicalValues { rows: [[]], schema: Schema { fields: [] } }
            LogicalValues { rows: [[1:Int32]], schema: Schema { fields: [:Int32] } }
          LogicalProject { exprs: [($0 >= 1:Int32)] }
            LogicalAgg { group_keys: [], agg_calls: [count] }
              LogicalValues { rows: [[1:Int32]], schema: Schema { fields: [:Int32] } }
- sql: |
    select 1 + (select 2 from t);
  binder_error: 'Catalog error: table or source not found: t'
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2);
  logical_plan: |
    LogicalProject { exprs: [$1] }
      LogicalJoin { type: LeftSemi, on: ($2 = $3), output_indices: all }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [$2] }
          LogicalScan { table: t2, columns: [_row_id, x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y not in (select y from t2);
  logical_plan: |
    LogicalProject { exprs: [$1] }
      LogicalJoin { type: LeftAnti, on: ($2 = $3), output_indices: all }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [$2] }
          LogicalScan { table: t2, columns: [_row_id, x, y] }
