# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select * from t) where v2 > 1;
  logical_plan: |
    LogicalProject { exprs: [$0] }
      LogicalFilter { predicate: ($1 > 1:Int32) }
        LogicalProject { exprs: [$1, $2] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    /* merge and then eliminate */
    create table t (v1 bigint, v2 double precision);
    select a1 as v1, a2 as v2 from (select v1 as a1, v2 as a2 from t);
  logical_plan: |
    LogicalProject { exprs: [$0, $1] }
      LogicalProject { exprs: [$1, $2] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalScan { table: t, columns: [v1, v2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select v2, v1 as v3 from t) where v2 > 1;
  binder_error: 'Item not found: Invalid column: v1'
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v3 from (select v2, v1 as v3 from t) where v2 > 1;
  logical_plan: |
    LogicalProject { exprs: [$1] }
      LogicalFilter { predicate: ($0 > 1:Int32) }
        LogicalProject { exprs: [$2, $1] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    /* consecutive projects are merged */
    create table t (v1 bigint, v2 double precision);
    select v1, 2 from (select v1, v2, 1 from t);
  logical_plan: |
    LogicalProject { exprs: [$0, 2:Int32] }
      LogicalProject { exprs: [$1, $2, 1:Int32] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, 2:Int32] }
      LogicalScan { table: t, columns: [v1] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t);
  logical_plan: |
    LogicalProject { exprs: [$0, $1] }
      LogicalProject { exprs: [$1, $2] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalScan { table: t, columns: [v1, v2] }
- sql: |
    /* joins */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t), t;
  logical_plan: |
    LogicalProject { exprs: [$0, $1, $3, $4] }
      LogicalJoin { type: Inner, on: true, output_indices: all }
        LogicalProject { exprs: [$1, $2] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    /* table alias */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt join t on tt.v1=t.v1;
  logical_plan: |
    LogicalProject { exprs: [$0, $1, $3, $4] }
      LogicalJoin { type: Inner, on: ($0 = $3), output_indices: all }
        LogicalProject { exprs: [$1, $2] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    /* alias less columns than available */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt(a) join t on a=v1;
  logical_plan: |
    LogicalProject { exprs: [$0, $1, $3, $4] }
      LogicalJoin { type: Inner, on: ($0 = $3), output_indices: all }
        LogicalProject { exprs: [$1, $2] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    /* alias more columns than available */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt(a, b, c) join t on a=v1;
  binder_error: 'Bind error: table "tt" has less columns available but more aliases specified'
- sql: |
    create table t(x int);
    select * from t, (select * from t as t2 order by t.x desc) as t3;
  binder_error: 'Bind error: Join table "(SELECT * FROM t AS t2 ORDER BY t.x DESC) AS t3" has correlated input reference'
- sql: |
    create table t(x int);
    select * from t, (select t.x) as t1;
  binder_error: 'Bind error: Join table "(SELECT t.x) AS t1" has correlated input reference'
- sql: |
    create table t(x int);
    select * from t JOIN (select t.x) as t1;
  binder_error: 'Bind error: Join table "(SELECT t.x) AS t1" has correlated input reference'
