- input: CREATE DATABASE t
  formatted_sql: CREATE DATABASE t
  formatted_ast: |
    CreateDatabase { db_name: ObjectName([Ident { value: "t", quote_style: None }]), if_not_exists: false, location: None, managed_location: None }

- input: CREATE DATABASE IF NOT EXISTS t
  formatted_sql: CREATE DATABASE IF NOT EXISTS t
  formatted_ast: |
    CreateDatabase { db_name: ObjectName([Ident { value: "t", quote_style: None }]), if_not_exists: true, location: None, managed_location: None }

- input: CREATE SCHEMA t
  formatted_sql: CREATE SCHEMA t
  formatted_ast: |
    CreateSchema { schema_name: ObjectName([Ident { value: "t", quote_style: None }]), if_not_exists: false }

- input: CREATE SCHEMA IF NOT EXISTS t
  formatted_sql: CREATE SCHEMA IF NOT EXISTS t
  formatted_ast: |
    CreateSchema { schema_name: ObjectName([Ident { value: "t", quote_style: None }]), if_not_exists: true }

- input: CREATE OR REPLACE TABLE t (a INT)
  formatted_sql: CREATE OR REPLACE TABLE t (a INT)

- input: CREATE TABLE t (a INT, b INT) AS SELECT 1 AS b, 2 AS a
  formatted_sql: CREATE TABLE t (a INT, b INT) AS SELECT 1 AS b, 2 AS a

- input: CREATE SOURCE src
  error_msg: |
    sql parser error: Expected ROW, found: EOF

- input: CREATE SOURCE src ROW FORMAT JSON
  formatted_sql: CREATE SOURCE src ROW FORMAT JSON

- input: CREATE SOURCE IF NOT EXISTS src WITH ('kafka.topic' = 'abc', 'kafka.servers' = 'localhost:1001') ROW FORMAT PROTOBUF MESSAGE 'Foo' ROW SCHEMA LOCATION 'file://'
  formatted_sql: CREATE SOURCE IF NOT EXISTS src WITH ('kafka.topic' = 'abc', 'kafka.servers' = 'localhost:1001') ROW FORMAT PROTOBUF MESSAGE 'Foo' ROW SCHEMA LOCATION 'file://'
  formatted_ast: |
    CreateSource { is_materialized: false, stmt: CreateSourceStatement { if_not_exists: true, columns: [], constraints: [], source_name: ObjectName([Ident { value: "src", quote_style: None }]), with_properties: WithProperties([SqlOption { name: Ident { value: "kafka.topic", quote_style: Some('\'') }, value: SingleQuotedString("abc") }, SqlOption { name: Ident { value: "kafka.servers", quote_style: Some('\'') }, value: SingleQuotedString("localhost:1001") }]), source_schema: Protobuf(ProtobufSchema { message_name: AstString("Foo"), row_schema_location: AstString("file://") }) } }

- input: CREATE TABLE T (v1 INT, v2 STRUCT<v1 INT, v2 INT>)
  formatted_sql: CREATE TABLE T (v1 INT, v2 STRUCT<v1 INT, v2 INT>)

- input: CREATE TABLE T (v1 INT, v2 STRUCT<v1 INT, v2 INT, v3 STRUCT<v1 INT, v2 INT>>)
  formatted_sql: CREATE TABLE T (v1 INT, v2 STRUCT<v1 INT, v2 INT, v3 STRUCT<v1 INT, v2 INT>>)

- input: CREATE TABLE T (a STRUCT<v1 INT>)
  formatted_sql: CREATE TABLE T (a STRUCT<v1 INT>)

- input: CREATE USER user WITH SUPERUSER CREATEDB PASSWORD 'password'
  formatted_sql: CREATE USER user WITH SUPERUSER CREATEDB PASSWORD 'password'

- input: CREATE SINK snk
  error_msg: |
    sql parser error: Expected FROM, found: EOF

- input: CREATE SINK IF NOT EXISTS snk FROM mv WITH ('sink' = 'mysql', 'mysql.endpoint' = '127.0.0.1:3306', 'mysql.table' = '<table_name>', 'mysql.database' = '<database_name>', 'mysql.user' = '<user_name>', 'mysql.password' = '<password>')
  formatted_sql: CREATE SINK IF NOT EXISTS snk FROM mv WITH ('sink' = 'mysql', 'mysql.endpoint' = '127.0.0.1:3306', 'mysql.table' = '<table_name>', 'mysql.database' = '<database_name>', 'mysql.user' = '<user_name>', 'mysql.password' = '<password>')
