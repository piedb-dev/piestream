- input: SELECT sqrt(id) FROM foo
  formatted_sql: SELECT sqrt(id) FROM foo
  formatted_ast: |
    Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(Function(Function { name: ObjectName([Ident { value: "sqrt", quote_style: None }]), args: [Unnamed(Expr(Identifier(Ident { value: "id", quote_style: None })))], over: None, distinct: false, order_by: [], filter: None }))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

# Typed string literal
- input: SELECT INT '1'
  formatted_sql: SELECT INT '1'

- input: SELECT (foo).v1.v2 FROM foo
  formatted_sql: SELECT foo.v1.v2 FROM foo

- input: SELECT ((((foo).v1)).v2) FROM foo
  formatted_sql: SELECT (foo.v1.v2) FROM foo
  formatted_ast: |
    Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(Nested(FieldIdentifier(Identifier(Ident { value: "foo", quote_style: None }), [Ident { value: "v1", quote_style: None }, Ident { value: "v2", quote_style: None }])))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

- input: SELECT (foo.v1).v2 FROM foo
  formatted_sql: SELECT foo.v1.v2 FROM foo

- input: SELECT (v1).v2 FROM foo
  formatted_sql: SELECT v1.v2 FROM foo

- input: SELECT ((1,2,3)::foo).v1
  formatted_sql: SELECT CAST(ROW(1, 2, 3) AS foo).v1

- input: SELECT ((1,2,3)::foo).v1.v2
  formatted_sql: SELECT CAST(ROW(1, 2, 3) AS foo).v1.v2

- input: SELECT (((1,2,3)::foo).v1).v2
  formatted_sql: SELECT CAST(ROW(1, 2, 3) AS foo).v1.v2

- input: SELECT (foo).* FROM foo
  formatted_sql: SELECT foo..* FROM foo

- input: SELECT ((foo.v1).v2).* FROM foo
  formatted_sql: SELECT foo.v1.v2.* FROM foo

- input: SELECT ((1,2,3)::foo).v1.*
  formatted_sql: SELECT CAST(ROW(1, 2, 3) AS foo).v1.*

- input: SELECT (((((1,2,3)::foo).v1))).*
  formatted_sql: SELECT CAST(ROW(1, 2, 3) AS foo).v1.*

- input: SELECT * FROM generate_series('2'::INT,'10'::INT,'2'::INT)
  formatted_sql: SELECT * FROM generate_series(CAST('2' AS INT), CAST('10' AS INT), CAST('2' AS INT))
  formatted_ast: |
    Query(Query { with: None, body: Select(Select { distinct: false, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "generate_series", quote_style: None }]), alias: None, args: [Unnamed(Expr(Cast { expr: Value(SingleQuotedString("2")), data_type: Int(None) })), Unnamed(Expr(Cast { expr: Value(SingleQuotedString("10")), data_type: Int(None) })), Unnamed(Expr(Cast { expr: Value(SingleQuotedString("2")), data_type: Int(None) }))] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

- input: SELECT * FROM unnest(Array[1,2,3]);
  formatted_sql: SELECT * FROM unnest(ARRAY[1, 2, 3])
  formatted_ast: |
    Query(Query { with: None, body: Select(Select { distinct: false, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "unnest", quote_style: None }]), alias: None, args: [Unnamed(Expr(Array([Value(Number("1", false)), Value(Number("2", false)), Value(Number("3", false))])))] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

- input: SELECT id, fname, lname FROM customer WHERE salary <> 'Not Provided' AND salary <> ''
  formatted_sql: SELECT id, fname, lname FROM customer WHERE (salary <> 'Not Provided') AND (salary <> '')

- input: SELECT id FROM customer WHERE NOT salary = ''
  formatted_sql: SELECT id FROM customer WHERE NOT (salary = '')
